<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>性能测试 on bei的个人博客</title>
    <link>http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
    <description>Recent content in 性能测试 on bei的个人博客</description>
    <generator>Hugo</generator>
    <language>zh-cn</language>
    <atom:link href="http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>benchmark</title>
      <link>http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/golang-benchmark/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/golang-benchmark/</guid>
      <description>&lt;h1 id=&#34;go-基准测试benchmark原理与实践&#34;&gt;&#xA;  Go 基准测试（Benchmark）原理与实践&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-%e5%9f%ba%e5%87%86%e6%b5%8b%e8%af%95benchmark%e5%8e%9f%e7%90%86%e4%b8%8e%e5%ae%9e%e8%b7%b5&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;📈 &lt;strong&gt;go test -bench&lt;/strong&gt; 能让你在纳秒级别洞察代码性能。本指南汇总了从运行原理到实战技巧的完整知识点。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;1--核心概念速览&#34;&gt;&#xA;  1 — 核心概念速览&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1--%e6%a0%b8%e5%bf%83%e6%a6%82%e5%bf%b5%e9%80%9f%e8%a7%88&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;关键对象&lt;/th&gt;&#xA;          &lt;th&gt;作用&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;go test -bench&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;启动基准测试运行器（benchmark harness）。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;func BenchmarkXxx(b *testing.B)&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;声明一个基准测试函数，名称需以 &lt;code&gt;Benchmark&lt;/code&gt; 前缀开头。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;&lt;code&gt;b.N&lt;/code&gt;&lt;/td&gt;&#xA;          &lt;td&gt;运行器自动决定的循环次数；被测代码需放入 &lt;code&gt;for i := 0; i &amp;lt; b.N; i++ { … }&lt;/code&gt;。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;计时/统计&lt;/td&gt;&#xA;          &lt;td&gt;默认统计 &lt;strong&gt;wall‑clock&lt;/strong&gt; 时间（&lt;code&gt;ns/op&lt;/code&gt;）；使用 &lt;code&gt;-benchmem&lt;/code&gt; 可额外输出 &lt;code&gt;B/op&lt;/code&gt; 与 &lt;code&gt;allocs/op&lt;/code&gt;。&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;常用辅助 API&lt;/td&gt;&#xA;          &lt;td&gt;&lt;code&gt;b.ResetTimer()&lt;/code&gt;、&lt;code&gt;b.StopTimer()/b.StartTimer()&lt;/code&gt;、&lt;code&gt;b.ReportAllocs()&lt;/code&gt;、&lt;code&gt;b.SetBytes(n)&lt;/code&gt;、&lt;code&gt;b.RunParallel()&lt;/code&gt;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;2--benchmark-运行原理&#34;&gt;&#xA;  2 — Benchmark 运行原理&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#2--benchmark-%e8%bf%90%e8%a1%8c%e5%8e%9f%e7%90%86&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;编译阶段&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/pprof_analysis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/docs/go/%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/pprof_analysis/</guid>
      <description>&lt;h1 id=&#34;go-pprof-性能分析实践手册&#34;&gt;&#xA;  Go &lt;code&gt;pprof&lt;/code&gt; 性能分析实践手册&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#go-pprof-%e6%80%a7%e8%83%bd%e5%88%86%e6%9e%90%e5%ae%9e%e8%b7%b5%e6%89%8b%e5%86%8c&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;适用版本&lt;/strong&gt;：Go 1.20 – Go 1.23（2025 年最新版）&lt;br&gt;&#xA;&lt;strong&gt;阅读对象&lt;/strong&gt;：希望系统掌握 &lt;code&gt;pprof&lt;/code&gt; 并落地到生产的 Go 开发 / SRE&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;目录&#34;&gt;&#xA;  目录&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#%e7%9b%ae%e5%bd%95&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;概览：&lt;code&gt;pprof&lt;/code&gt; 能解决什么问题&lt;/li&gt;&#xA;&lt;li&gt;Profile 类型与采样原理&lt;/li&gt;&#xA;&lt;li&gt;离线采集：基准测试 &amp;amp; CLI&lt;/li&gt;&#xA;&lt;li&gt;在线采集：&lt;code&gt;net/http/pprof&lt;/code&gt; &amp;amp; 远程抓取&lt;/li&gt;&#xA;&lt;li&gt;可视化：命令行、FlameGraph、Speedscope&lt;/li&gt;&#xA;&lt;li&gt;案例一：CPU Hotspot 定位与优化&lt;/li&gt;&#xA;&lt;li&gt;案例二：内存泄漏排查&lt;/li&gt;&#xA;&lt;li&gt;案例三：阻塞 / Mutex 竞争分析&lt;/li&gt;&#xA;&lt;li&gt;持续 Profiling：Parca / Pyroscope / Grafana Pyroscope Cloud&lt;/li&gt;&#xA;&lt;li&gt;PGO：Profile-Guided Optimization 流程&lt;/li&gt;&#xA;&lt;li&gt;自动化工作流与 CI 集成&lt;/li&gt;&#xA;&lt;li&gt;常见误区 &amp;amp; 调参清单&lt;/li&gt;&#xA;&lt;li&gt;参考链接&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;hr&gt;&#xA;&lt;h2 id=&#34;1-概览pprof-能解决什么问题&#34;&gt;&#xA;  1. 概览：&lt;code&gt;pprof&lt;/code&gt; 能解决什么问题&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#1-%e6%a6%82%e8%a7%88pprof-%e8%83%bd%e8%a7%a3%e5%86%b3%e4%bb%80%e4%b9%88%e9%97%ae%e9%a2%98&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;定位 CPU 热点&lt;/strong&gt;：采样型 Profile，找到最耗时的函数或调用链&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;排查内存泄漏&lt;/strong&gt;：对比多份堆快照，确定分配点&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;锁竞争 / 阻塞&lt;/strong&gt;：查看被 &lt;code&gt;sync.Mutex&lt;/code&gt; 或系统调用阻塞的时间&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Goroutine 爆炸&lt;/strong&gt;：快照当前所有 goroutine 栈，分析创建源&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&lt;code&gt;pprof&lt;/code&gt; 不会直接告诉你“怎么改”，但能精准指向&lt;strong&gt;瓶颈位置&lt;/strong&gt;。随后通过代码 / 参数 / 架构层面优化并 &lt;strong&gt;benchstat&lt;/strong&gt; 验证。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
